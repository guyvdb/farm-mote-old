#include "wifi.h"

#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "esp_err.h"
#include "nvs_flash.h"

#include "lwip/err.h"
#include "lwip/sys.h"

#include "../kv/kv.h"



#define EXAMPLE_ESP_MAXIMUM_RETRY  2
#define WIFI_CONNECTED_BIT BIT0
#define WIFI_FAIL_BIT      BIT1


static EventGroupHandle_t s_wifi_event_group;
static const char *TAG = "wifi station";

static int s_retry_num = 0;



/*
esp_err_t event_handler(void *ctx, system_event_t *event)
{

    switch (event->event_id) {
    case SYSTEM_EVENT_STA_START:
 	    ESP_LOGI(TAG, "STA_START %s %d\n", __func__, __LINE__);
  	    xEventGroupSetBits(wifi_event_group, ST_INITIALIZED_BIT);
 	    ESP_LOGI(TAG, "Connecting..\n");
 	    esp_wifi_connect();
        break;
    case SYSTEM_EVENT_STA_STOP:
 	    ESP_LOGI(TAG, "STA_STOP %s %d\n", __func__, __LINE__);
 	   xEventGroupClearBits(wifi_event_group, ST_INITIALIZED_BIT);
 	    ESP_ERROR_CHECK( esp_wifi_deinit());
        break;
    case SYSTEM_EVENT_STA_GOT_IP:
 	    ESP_LOGI(TAG, "STA_GOT_IP %s %d\n", __func__, __LINE__);
            xEventGroupSetBits(wifi_event_group, ST_CONNECTED_BIT);
        break;
    case SYSTEM_EVENT_STA_LOST_IP:
 	    ESP_LOGI(TAG, "STA_LOST_IP %s %d\n", __func__, __LINE__);
	    xEventGroupClearBits(wifi_event_group, ST_CONNECTED_BIT);
 	    break;
    case SYSTEM_EVENT_STA_CONNECTED:
 	    ESP_LOGI(TAG, "STA_CONNECTED %s %d\n", __func__, __LINE__);
 	    break;
    case SYSTEM_EVENT_STA_DISCONNECTED:
 	    ESP_LOGI(TAG, "STA_DISCONNECTED %s %d\n", __func__, __LINE__);
	    xEventGroupClearBits(wifi_event_group, ST_CONNECTED_BIT);
        break;
    default:
 	    ESP_LOGI(TAG, "XXX_DEFAULT %s %d\n", __func__, __LINE__);
        break;
    }

    return ESP_OK;
}

*/


static void event_handler(void* arg, esp_event_base_t event_base, int32_t event_id, void* event_data) {
  if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {
    esp_wifi_connect();
  } else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED) {
    if (s_retry_num < EXAMPLE_ESP_MAXIMUM_RETRY) {
      esp_wifi_connect();
      s_retry_num++;
      //ESP_LOGI(TAG, "retry to connect to the AP");
    } else {
      xEventGroupSetBits(s_wifi_event_group, WIFI_FAIL_BIT);
    }
    //ESP_LOGI(TAG,"connect to the AP fail");
  } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
    ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;
    //ESP_LOGI(TAG, "got ip:" IPSTR, IP2STR(&event->ip_info.ip));
    s_retry_num = 0;
    xEventGroupSetBits(s_wifi_event_group, WIFI_CONNECTED_BIT);
  }
}


void initialize_wifi(void) {


  char ssid[32];
  char password[64];
  esp_err_t err ;


  // esp_log_level_set("wifi", ESP_LOG_NONE);

  
  s_wifi_event_group = xEventGroupCreate();
  
  ESP_ERROR_CHECK(esp_netif_init());

  ESP_ERROR_CHECK(esp_event_loop_create_default());
  esp_netif_create_default_wifi_sta();

  wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
  ESP_ERROR_CHECK(esp_wifi_init(&cfg));

  ESP_ERROR_CHECK(esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &event_handler, NULL));
  ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &event_handler, NULL));


  get_wifi_ssid(ssid, sizeof(ssid));
  get_wifi_password(password, sizeof(password));

  wifi_config_t wifi_config = {.sta = {} };

  for(int i=0;i<sizeof(ssid);i++) {
    wifi_config.sta.ssid[i] = ssid[i];
  }

  for(int i=0;i<sizeof(password);i++) {
    wifi_config.sta.password[i] = password[i];
  }

  
  printf("using: %s - %s\n",ssid, password);


  ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA) );
  ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config) );
  ESP_ERROR_CHECK(esp_wifi_start() );

  ESP_LOGI(TAG, "wifi_init_sta finished.");


  EventBits_t bits = xEventGroupWaitBits(s_wifi_event_group,
                                         WIFI_CONNECTED_BIT | WIFI_FAIL_BIT,
                                         pdFALSE,
                                         pdFALSE,
                                         portMAX_DELAY);


  if (bits & WIFI_CONNECTED_BIT) {
    ESP_LOGI(TAG, "connected to ap SSID:%s password:%s",ssid,password);
  } else if (bits & WIFI_FAIL_BIT) {
    ESP_LOGI(TAG, "Failed to connect to SSID:%s, password:%s",ssid,password);
  } else {
    ESP_LOGE(TAG, "UNEXPECTED EVENT");
  }

  ESP_ERROR_CHECK(esp_event_handler_unregister(IP_EVENT, IP_EVENT_STA_GOT_IP, &event_handler));
  ESP_ERROR_CHECK(esp_event_handler_unregister(WIFI_EVENT, ESP_EVENT_ANY_ID, &event_handler));
  vEventGroupDelete(s_wifi_event_group);
}

